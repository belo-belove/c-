*验证卡布列克运算。即：任意一个四位数，只要它们各个位上的数字是不全相同的，就有这样的规律：
（1）将组成该四位数的四个数字由大到小排列，形成由这四个数字构成的最大的四位数；
（2）将组成该四位数的四个数字由小到大排列，形成由这四个数字构成的最小的四位数（如果四个数字中含有0，则得到的数不足四位）；
（3）求两个数的差，得到一个新的四位数（高位零保留）。
重复以上过程，最后得到的结果总是6174。这个数被称为卡布列克常数。请编写一个递归函数，完成以上的卡布列克运算。

**输入格式要求："%d" 提示信息："Enter number:"
**输出格式要求：" [%d]:%d-%d=%d\n"
程序运行示例如下：
Enter number: 1234
 [1]:4321-1234=3087
 [2]:8730-378=8352
 [3]:8532-2358=6174


#include <stdio.h>

void kaprekar(int num, int count);

int main() {
    int num;
    printf("Enter number: ");
    scanf("%d", &num);
    kaprekar(num, 1);
    return 0;
}

void kaprekar(int num, int count) {
    int asc, desc, diff;
    int digits[4];
    int i, j, temp;
    
    // 将数字的每个位放入数组
    for (i = 0; i < 4; i++) {
        digits[i] = num % 10;
        num /= 10;
    }
    
    // 排序数组，得到最大值（降序）
    for (i = 0; i < 3; i++) {
        for (j = i + 1; j < 4; j++) {
            if (digits[i] < digits[j]) {
                temp = digits[i];
                digits[i] = digits[j];
                digits[j] = temp;
            }
        }
    }
    
    // 计算最大值和最小值
    desc = digits[0] * 1000 + digits[1] * 100 + digits[2] * 10 + digits[3];
    
    // 排序数组，得到最小值（升序）
    for (i = 0; i < 3; i++) {
        for (j = i + 1; j < 4; j++) {
            if (digits[i] > digits[j]) {
                temp = digits[i];
                digits[i] = digits[j];
                digits[j] = temp;
            }
        }
    }
    
    // 计算差值
    asc = digits[0] * 1000 + digits[1] * 100 + digits[2] * 10 + digits[3];
    diff = desc - asc;
    
    printf(" [%d]:%d-%d=%d\n", count, desc, asc, diff);
    
    // 递归调用，直到得到的差值为6174
    if (diff != 6174) {
        kaprekar(diff, count + 1);
    }
}
